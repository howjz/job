plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.8.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'maven-publish'
    id 'signing'
}

group 'com.github.howjz'
version '1.0.0-SNAPSHOT'

ext {
    log4j2Version = '2.7'
    slf4jVersion = '1.7.22'
    springBootVersion = '2.1.8.RELEASE'
    druidVersion = '1.1.9'
    mybatisStarterVersion = '2.1.0'
    serviceVersion = '1.0.0-SNAPSHOT'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

project(':job-core') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    dependencies {
        // bean
        compile("org.projectlombok:lombok:1.18.4")

        // commons
        compile("commons-lang:commons-lang:2.3")
        compile("org.apache.commons:commons-lang3:3.6")
        compile("commons-io:commons-io:2.6")

        // json
        compile("com.fasterxml.jackson.core:jackson-core:2.9.10")
        compile("com.fasterxml.jackson.core:jackson-databind:2.9.10")

        // log
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        runtime("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
        compile("org.apache.logging.log4j:log4j-web:${log4j2Version}")
        compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}")
        compile("org.apache.logging.log4j:log4j-api:${log4j2Version}")
        compile("org.apache.logging.log4j:log4j-core:${log4j2Version}")

        // http
        compile("com.squareup.okhttp3:okhttp:3.12.0")

        // test
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

project(':job-spring-boot-autoconfigure') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    dependencies {
        compile project(":job-core")
        compile("org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    }
}

project(':job-spring-boot-starter:job-spring-boot-starter') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    dependencies {
        compile project(":job-spring-boot-autoconfigure")
        compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    }
}

project(':job-spring-boot-starter:job-spring-boot-starter-redis') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    dependencies {
        compile project(":job-spring-boot-autoconfigure")
        // redis
        compile("org.apache.commons:commons-pool2:2.0")
        compile("org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}")
    }
}

project(':job-spring-boot-starter:job-spring-boot-starter-db') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    dependencies {
        compile project(":job-spring-boot-autoconfigure")
        // druid
        compile("com.alibaba:druid-spring-boot-starter:${druidVersion}")
        // mybatis
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisStarterVersion}")
    }
}

project(':job-spring-boot-samples') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    dependencies {
        compile project(":job-spring-boot-starter:job-spring-boot-starter")
//        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 1.8
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        // Maven本地仓库
        mavenLocal()
        // 阿里巴巴Maven库
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        // 中央库
        mavenCentral()
    }

    javadoc {
        options.tags = ["date"]
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
    }

    // remove default logger
     configurations {
        all*.exclude group: 'commons-logging'
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId rootProject.name
                artifactId project.name
                version "$serviceVersion"
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'how-job'
                    description = 'A simple job executor library'
                    url = 'http://www.example.com/library'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'howjz'
                            name = 'ZhangJiaHao'
                            email = '2862424470@qq.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/howjz/job.git'
                        developerConnection = 'scm:git:ssh://github.com/howjz/job.git'
                        url = 'http://github.com/howjz/job'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                // 指定要上传的仓库
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                // 认证用户和密码
                credentials {
                    username "$nexususer"
                    password "$nexuspwd"
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html4', true)
    }
}
